{
  "title": "json â JSON encoder and decoder — Python 3.13.1 documentation",
  "content": [
    {
      "type": "function_signature",
      "text": "json.dump(obj,fp,*,skipkeys=False,ensure_ascii=True,check_circular=True,allow_nan=True,cls=None,indent=None,separators=None,default=None,sort_keys=False,**kw)Â¶"
    },
    {
      "type": "function_description",
      "text": "Serializeobjas a JSON formatted stream tofp(a.write()-supportingfile-like object) using thisconversion table."
    },
    {
      "type": "function_description",
      "text": "Ifskipkeysis true (default:False), then dict keys that are not\nof a basic type (str,int,float,bool,None) will be skipped instead of raising aTypeError."
    },
    {
      "type": "function_description",
      "text": "Thejsonmodule always producesstrobjects, notbytesobjects. Therefore,fp.write()must supportstrinput."
    },
    {
      "type": "function_description",
      "text": "Ifensure_asciiis true (the default), the output is guaranteed to\nhave all incoming non-ASCII characters escaped.  Ifensure_asciiis\nfalse, these characters will be output as-is."
    },
    {
      "type": "function_description",
      "text": "Ifcheck_circularis false (default:True), then the circular\nreference check for container types will be skipped and a circular reference\nwill result in aRecursionError(or worse)."
    },
    {
      "type": "function_description",
      "text": "Ifallow_nanis false (default:True), then it will be aValueErrorto serialize out of rangefloatvalues (nan,inf,-inf) in strict compliance of the JSON specification.\nIfallow_nanis true, their JavaScript equivalents (NaN,Infinity,-Infinity) will be used."
    },
    {
      "type": "function_description",
      "text": "Ifindentis a non-negative integer or string, then JSON array elements and\nobject members will be pretty-printed with that indent level.  An indent level\nof 0, negative, or\"\"will only insert newlines.None(the default)\nselects the most compact representation. Using a positive integer indent\nindents that many spaces per level.  Ifindentis a string (such as\"\\t\"),\nthat string is used to indent each level."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.2:Allow strings forindentin addition to integers."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.2:Allow strings forindentin addition to integers."
    },
    {
      "type": "function_description",
      "text": "If specified,separatorsshould be an(item_separator,key_separator)tuple.  The default is(',',':')ifindentisNoneand(',',':')otherwise.  To get the most compact JSON representation,\nyou should specify(',',':')to eliminate whitespace."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.4:Use(',',':')as default ifindentis notNone."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.4:Use(',',':')as default ifindentis notNone."
    },
    {
      "type": "function_description",
      "text": "If specified,defaultshould be a function that gets called for objects that\ncanât otherwise be serialized.  It should return a JSON encodable version of\nthe object or raise aTypeError.  If not specified,TypeErroris raised."
    },
    {
      "type": "function_description",
      "text": "Ifsort_keysis true (default:False), then the output of\ndictionaries will be sorted by key."
    },
    {
      "type": "function_description",
      "text": "To use a customJSONEncodersubclass (e.g. one that overrides thedefault()method to serialize additional types), specify it with theclskwarg; otherwiseJSONEncoderis used."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:All optional parameters are nowkeyword-only."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:All optional parameters are nowkeyword-only."
    },
    {
      "type": "function_description",
      "text": "NoteUnlikepickleandmarshal, JSON is not a framed protocol,\nso trying to serialize multiple objects with repeated calls todump()using the samefpwill result in an invalid JSON file."
    },
    {
      "type": "function_description",
      "text": "Note"
    },
    {
      "type": "function_description",
      "text": "Unlikepickleandmarshal, JSON is not a framed protocol,\nso trying to serialize multiple objects with repeated calls todump()using the samefpwill result in an invalid JSON file."
    },
    {
      "type": "function_signature",
      "text": "json.dumps(obj,*,skipkeys=False,ensure_ascii=True,check_circular=True,allow_nan=True,cls=None,indent=None,separators=None,default=None,sort_keys=False,**kw)Â¶"
    },
    {
      "type": "function_description",
      "text": "Serializeobjto a JSON formattedstrusing thisconversion\ntable.  The arguments have the same meaning as indump()."
    },
    {
      "type": "function_description",
      "text": "NoteKeys in key/value pairs of JSON are always of the typestr. When\na dictionary is converted into JSON, all the keys of the dictionary are\ncoerced to strings. As a result of this, if a dictionary is converted\ninto JSON and then back into a dictionary, the dictionary may not equal\nthe original one. That is,loads(dumps(x))!=xif x has non-string\nkeys."
    },
    {
      "type": "function_description",
      "text": "Note"
    },
    {
      "type": "function_description",
      "text": "Keys in key/value pairs of JSON are always of the typestr. When\na dictionary is converted into JSON, all the keys of the dictionary are\ncoerced to strings. As a result of this, if a dictionary is converted\ninto JSON and then back into a dictionary, the dictionary may not equal\nthe original one. That is,loads(dumps(x))!=xif x has non-string\nkeys."
    },
    {
      "type": "function_signature",
      "text": "json.load(fp,*,cls=None,object_hook=None,parse_float=None,parse_int=None,parse_constant=None,object_pairs_hook=None,**kw)Â¶"
    },
    {
      "type": "function_description",
      "text": "Deserializefp(a.read()-supportingtext fileorbinary filecontaining a JSON document) to a Python object using\nthisconversion table."
    },
    {
      "type": "function_description",
      "text": "object_hookis an optional function that will be called with the result of\nany object literal decoded (adict).  The return value ofobject_hookwill be used instead of thedict.  This feature can\nbe used to implement custom decoders (e.g.JSON-RPCclass hinting)."
    },
    {
      "type": "function_description",
      "text": "object_pairs_hookis an optional function that will be called with the\nresult of any object literal decoded with an ordered list of pairs.  The\nreturn value ofobject_pairs_hookwill be used instead of thedict.  This feature can be used to implement custom decoders.  Ifobject_hookis also defined, theobject_pairs_hooktakes priority."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.1:Added support forobject_pairs_hook."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.1:Added support forobject_pairs_hook."
    },
    {
      "type": "function_description",
      "text": "parse_floatis an optional function that will be called with the string of\nevery JSON float to be decoded.  By default, this is equivalent tofloat(num_str).  This can be used to use another datatype or parser for\nJSON floats (e.g.decimal.Decimal)."
    },
    {
      "type": "function_description",
      "text": "parse_intis an optional function that will be called with the string of\nevery JSON int to be decoded.  By default, this is equivalent toint(num_str).  This can be used to use another datatype or parser for\nJSON integers (e.g.float)."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.11:The defaultparse_intofint()now limits the maximum length of\nthe integer string via the interpreterâsinteger string\nconversion length limitationto help avoid denial\nof service attacks."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.11:The defaultparse_intofint()now limits the maximum length of\nthe integer string via the interpreterâsinteger string\nconversion length limitationto help avoid denial\nof service attacks."
    },
    {
      "type": "function_description",
      "text": "parse_constantis an optional function that will be called with one of the\nfollowing strings:'-Infinity','Infinity','NaN'.  This can be\nused to raise an exception if invalid JSON numbers are encountered."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.1:parse_constantdoesnât get called on ânullâ, âtrueâ, âfalseâ anymore."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.1:parse_constantdoesnât get called on ânullâ, âtrueâ, âfalseâ anymore."
    },
    {
      "type": "function_description",
      "text": "To use a customJSONDecodersubclass, specify it with theclskwarg; otherwiseJSONDecoderis used.  Additional keyword arguments\nwill be passed to the constructor of the class."
    },
    {
      "type": "function_description",
      "text": "If the data being deserialized is not a valid JSON document, aJSONDecodeErrorwill be raised."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:All optional parameters are nowkeyword-only."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:All optional parameters are nowkeyword-only."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:fpcan now be abinary file. The input encoding should be\nUTF-8, UTF-16 or UTF-32."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:fpcan now be abinary file. The input encoding should be\nUTF-8, UTF-16 or UTF-32."
    },
    {
      "type": "function_signature",
      "text": "json.loads(s,*,cls=None,object_hook=None,parse_float=None,parse_int=None,parse_constant=None,object_pairs_hook=None,**kw)Â¶"
    },
    {
      "type": "function_description",
      "text": "Deserializes(astr,bytesorbytearrayinstance containing a JSON document) to a Python object using thisconversion table."
    },
    {
      "type": "function_description",
      "text": "The other arguments have the same meaning as inload()."
    },
    {
      "type": "function_description",
      "text": "If the data being deserialized is not a valid JSON document, aJSONDecodeErrorwill be raised."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:scan now be of typebytesorbytearray. The\ninput encoding should be UTF-8, UTF-16 or UTF-32."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.6:scan now be of typebytesorbytearray. The\ninput encoding should be UTF-8, UTF-16 or UTF-32."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.9:The keyword argumentencodinghas been removed."
    },
    {
      "type": "function_description",
      "text": "Changed in version 3.9:The keyword argumentencodinghas been removed."
    }
  ],
  "timestamp": "2024-12-18T20:51:43.924526",
  "url": "https://docs.python.org/3/library/json.html"
}